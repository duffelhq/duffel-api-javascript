import { CabinClass } from 'types'

export interface PaymentRequirements {
  /**
   *  The ISO 8601 datetime by which you must pay for this order.
   * At this time, if still unpaid, the reserved space on the flight(s)
   * will be released and you will have to create a new order.
   * This will be null only for orders where `awaiting_payment` is `false`.
   */
  paymentRequiredBy?: string | null
  /**
   *  The ISO 8601 datetime at which the price associated
   * with the order will no longer be guaranteed by the airline
   * and the order will need to be repriced before payment.
   * This can be null when there is no price guarantee.
   */
  priceGuaranteeExpiresAt?: string | null
  /**
   * Whether immediate payment is required or not
   */
  requiresInstantPayment: boolean
}

export namespace Offers {
  /**
   * The metropolitan area where the airport is located.
   * Only present for airports which are registered with IATA as belonging to a metropolitan area.
   * @link https://portal.iata.org/faq/articles/en_US/FAQ/How-do-I-create-a-new-Metropolitan-Area
   */
  export interface CitySlice {
    /**
     * The three-character IATA code for the city
     * @example "LON"
     */
    iataCode: string
    /**
     * The ISO 3166-1 alpha-2 code for the country where the city is located
     * @link https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
     * @example "GB"
     */
    iataCountryCode: string
    /**
     * Duffel's unique identifier for the city
     * @example "cit_lon_gb"
     */
    id: string
    /**
     * The name of the city
     * @example "London"
     */
    name: string
  }

  /**
   * The airports associated to a city.
   * This will only be provided where the `type` is `city`.
   */
  export interface AirportsSlice {
    city?: CitySlice
    cityName: string
    iataCode?: string
    iataCountryCode: string
    icaoCode?: string
    id: string
    latitude: number
    longitude: number
    name: string
    timeZone: string
  }

  export interface DestinationOrOriginProp {
    airports?: AirportsSlice[]
    city?: CitySlice
    cityName?: string
    iataCityCode?: string
    iataCode: string
    iataCountryCode: string
    icaoCode?: string
    id: string
    latitude?: number
    longitude?: number
    name: string
    timeZone?: string
    type: 'airport' | 'city'
  }

  export interface OfferRequestSlice {
    /**
     * The ISO 8601 date on which the passengers want to depart
     */
    departureDate: string
    /**
     * The city or airport the passengers want to travel to
     */
    destination: DestinationOrOriginProp | string
    /**
     * The city or airport the passengers want to depart from
     */
    origin: DestinationOrOriginProp | string
    originType: 'airport' | 'city'
    destinationType: 'airport' | 'city'
  }

  /**
   * The passengers who want to travel. A passenger will have only a type or an age.
   */
  export interface OfferRequestPassenger {
    /**
     * The age of the passenger on the `departure_date` of the final slice.
     */
    age?: number

    /**
     * The type of the passenger.
     */
    type?: 'adult'

    /**
     * The identifier for the passenger, unique within this Offer Request and across all Offer Requests.
     * This ID will be generated by Duffel unless you had optionally provided one.
     * Optionally providing one has been deprecated.
     */
    id: string
  }

  export interface OfferRequest {
    cabinClass?: CabinClass
    /**
     * The slices that make up this offer request.
     * One-way journeys can be expressed using one slice, whereas return trips will need two.
     * @link https://duffel.com/docs/api/overview/key-principles
     */
    slices: OfferRequestSlice[]
    cabinClass?: CabinClass
    createdAt: string
    id: string
    liveMode: boolean
    offers?: Omit<Offer, 'availableServices'>[]
    passengers: OfferRequestPassenger[]
  }

  export interface CreateOfferRequest {
    cabinClass: CabinClass
    passengers: Omit<OfferRequestPassenger, 'id'>[]
    slices: Omit<OfferRequestSlice, 'originType' | 'destinationType'>[]
  }

  export interface Offer {
    /**
     * The types of identity documents that may be provided for the passengers when creating an order based on this offer.
     * Currently, the only supported type is `passport`. If this is `[]`, then you must not provide identity documents.
     */
    allowedPassengerIdentityDocumentTypes: PassengerIdentityDocumentType[]

    /**
     * The services that can be booked along with the offer but are not included by default, for example an additional checked bag.
     * This field is only returned in the Get single offer endpoint.
     * When there are no services available, or we don't support services for the airline, this list will be empty.
     */
    availableServices: OfferAvailableService[]

    /**
     * The base price of the offer for all passengers, excluding taxes.
     * It does not include the base amount of any service(s) that might be booked with the offer.
     */
    baseAmount: string

    /**
     * The currency of the `base_amount`, as an [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code
     */
    baseCurrency: string

    /**
     * The ISO 8601 datetime at which the offer was created
     */
    createdAt: string

    /**
     * The ISO 8601 datetime at which the offer will expire and no longer be usable to create an order
     */
    expiresAt: string

    /**
     * Duffel's unique identifier for the offer
     */
    id: string

    /**
     * Whether the offer request was created in live mode.
     * This field will be set to `true` if the offer request was created in live mode, or `false` if it was created in test mode.
     */
    liveMode: boolean

    /**
     * The airline which provided the offer
     */
    owner: OfferOwner

    /**
     * Whether identity documents must be provided for each of the passengers when creating an order based on this offer.
     * If this is `true`, you must provide an identity document for every passenger.
     */
    passengerIdentityDocumentsRequired: boolean

    /**
     * The passengers included in the offer
     */
    passengers: OfferPassenger[]

    /**
     * The slices that make up this offer. Each slice will include one or more segments,
     * the specific flights that the airline is offering to take the passengers from the slice's `origin` to its `destination`.
     */
    slices: OfferSlice[]

    /**
     * The amount of tax payable on the offer for all passengers
     */
    taxAmount: string | null

    /**
     * The currency of the `tax_amount`, as an [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code
     */
    taxCurrency: string | null

    /**
     * The total price of the offer for all passengers, including taxes.
     * It does not include the total price of any service(s) that might be booked with the offer.
     */
    totalAmount: string

    /**
     * An estimate of the total carbon dioxide (COâ‚‚) emissions when
     * all of the passengers fly this offer's itinerary, measured in kilograms
     */
    totalEmissionsKg: string

    /**
     * The currency of the `total_amount`, as an [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code
     */
    totalCurrency: string

    /**
     * The payment requirements for this offer
     */
    paymentRequirements: PaymentRequirements

    /**
     * The conditions associated with this offer, describing the kinds of modifications you can make post-booking and any penalties that will apply to those modifications.
     * This information assumes the condition is applied to all of the slices and passengers associated with this offer - for information at the slice level (e.g. "what happens if I just want to change the first slice?") refer to the `slices`.
     * If a particular kind of modification is allowed, you may not always be able to take action through the Duffel API.
     * In some cases, you may need to contact the Duffel support team or the airline directly.
     */
    conditions: {
      /**
       * Whether the whole offer can be refunded before the departure of the first slice.
       * If all of the slices on the offer can be refunded then the `allowed` property will be `true` and information will be provided about any penalties.
       * If any of the slices on the offer can't be refunded then the `allowed` property will be `false`.
       * If the airline hasn't provided any information about whether this offer can be refunded then this property will be `null`.
       */
      refundBeforeDeparture?: {
        /**
         * The currency of the `penalty_amount` as an [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         * This will be in a currency determined by the airline, which is not necessarily the same as the currency of the offer or order.
         * If this is `null` then `penalty_amount` will also be `null`.
         * @example "GBP"
         */
        penaltyCurrency: string
        /**
         * If the modification is `allowed` then this is the amount payable to apply the modification to all passengers.
         * If there is no penalty, the value will be zero. If the modification isn't `allowed` or the penalty is not known then this field will be `null`.
         * If this is `null` then the `penalty_currency` will also be null.
         * @example "100.00"
         */
        penaltyAmount?: string
        /**
         * Whether this kind of modification is allowed post-booking
         *
         * @example "true"
         */
        allowed: boolean
      }
      /**
       * Whether the whole offer can be changed before the departure of the first slice.
       * If all of the slices on the offer can be changed then the `allowed` property will be `true`.
       * Refer to the `slices` for information about change penalties.
       * If any of the slices on the offer can't be changed then the `allowed` property will be `false`.
       * In this case you should refer to the slices conditions to determine if any part of the offer is changeable.
       * If the airline hasn't provided any information about whether this offer can be changed then this property will be `null`.
       */
      changeBeforeDeparture?: {
        /**
         * The currency of the `penalty_amount` as an [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.
         * This will be in a currency determined by the airline, which is not necessarily the same as the currency of the offer or order.
         * If this is `null` then `penalty_amount` will also be `null`.
         * @example "GBP"
         */
        penaltyCurrency: string
        /**
         * If the modification is `allowed` then this is the amount payable to apply the modification to all passengers.
         * If there is no penalty, the value will be zero. If the modification isn't `allowed` or the penalty is not known then this field will be `null`.
         * If this is `null` then the `penalty_currency` will also be null.
         * @example "100.00"
         */
        penaltyAmount?: string
        /**
         * Whether this kind of modification is allowed post-booking
         *
         * @example "true"
         */
        allowed: boolean
      }
    }
  }
}
